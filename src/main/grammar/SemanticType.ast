abstract SemanticType;
abstract ConceptualType : SemanticType;
abstract RoleishType    : SemanticType;


ParConceptualType : ConceptualType ::= Inner:ConceptualType;
ParRoleishType    : RoleishType    ::= Inner:RoleishType;


TopType     : ConceptualType;
BottomType  : ConceptualType;
ConceptType : ConceptualType ::= <Iri:String>;
OneType     : ConceptualType ::= <Iri:String>;

AnyType  : RoleishType;
NoneType : RoleishType;
RoleType : RoleishType ::= <Iri:String>;


NegationType  : ConceptualType ::= Operand:ConceptualType;
InversionType : RoleishType    ::= Operand:RoleishType;


abstract BinaryType : ConceptualType ::= Left:ConceptualType Right:ConceptualType;

UnionType        : BinaryType;
IntersectionType : BinaryType;


abstract QuantifierType : ConceptualType ::= Role:RoleishType Concept:ConceptualType;

ExistenceType : QuantifierType;
UniversalType : QuantifierType;


SemanticTypeDecl   : ClassDecl  ::= <Path:String> <Concept:semantics.model.Conceptual>;
SemanticTypeAccess : TypeAccess ::= Concept:ConceptualType;

SemanticCastExpr       : CastExpr;
SemanticInstanceOfExpr : InstanceOfExpr;
