aspect SemanticsPrettyPrint {
  public void BinaryType.prettyPrint(PrettyPrinter out) {
    out.print(getLeft());
    out.print(" ");
    out.print(printOp());
    out.print(" ");
    out.print(getRight());
  }
  public void ConceptType.prettyPrint(PrettyPrinter out) {
    out.print("\u00AB");
    out.print(getIri());
    out.print("\u00BB");
  }
  public void DlEverythingExpr.prettyPrint(PrettyPrinter out) {
    out.print("\u22A4");
  }
  public void DlInversionExpr.prettyPrint(PrettyPrinter out) {
    out.print(getOperand());
    out.print("\u207B");
  }
  public void DlNegationExpr.prettyPrint(PrettyPrinter out) {
    out.print("\u00AC");
    out.print(getOperand());
  }
  public void DlNothingExpr.prettyPrint(PrettyPrinter out) {
    out.print("\u22A5");
  }
  public void DlOneExpr.prettyPrint(PrettyPrinter out) {
    out.print("\u23A8");
    out.print(getOperand());
    out.print("\u23AC");
  }
  public void DlProjectionExpr.prettyPrint(PrettyPrinter out) {
    out.print(getExpr());
    out.print(".");
    out.print(getRole());
  }
  public void DlQuantifierExpr.prettyPrint(PrettyPrinter out) {
    out.print(printPrefix());
    out.print(getLeftOperand());
    out.print(" ");
    out.print(printOp());
    out.print(" ");
    out.print(getRightOperand());
  }
  public void DlQueryExpr.prettyPrint(PrettyPrinter out) {
    out.print("do-query(");
    out.print(getOperand());
    out.print(")");
  }
  public void DlTypecase.prettyPrint(PrettyPrinter out) {
    out.print("\uFF62");
    out.print(getType());
    out.print("\uFF63 ");
    out.print(getIdent());
    out.print(" ");
    out.print(getBlock());
  }
  public void DlTypecaseDefault.prettyPrint(PrettyPrinter out) {
    out.print("default ");
    out.print(getBlock());
  }
  public void DlTypecaseStmt.prettyPrint(PrettyPrinter out) {
    out.print("switch-type (");
    out.print(getExpr());
    out.print(") {");
    out.println();
    out.indent(1);
    out.join(getCasesList(), new PrettyPrinter.Joiner() {
      @Override
      public void printSeparator(PrettyPrinter out) {
        out.println();
      }
    });
    if (!out.isNewLine()) {
      out.println();
    }
    out.print("}");
  }
  public void EverythingType.prettyPrint(PrettyPrinter out) {
    out.print("\u22A4");
  }
  public void InversionType.prettyPrint(PrettyPrinter out) {
    out.print(getOperand());
    out.print("\u207B");
  }
  public void KnowsClassDecl.prettyPrint(PrettyPrinter out) {
    if (hasDocComment()) {
      out.print(docComment());
    }
    if (!out.isNewLine()) {
      out.println();
    }
    out.print(getModifiers());
    out.print("class ");
    out.print(getID());
    if (hasSuperClass()) {
      out.print(" extends ");
      out.print(getSuperClass());
    }
    if (hasImplements()) {
      out.print(" implements ");
      out.join(getImplementss(), new PrettyPrinter.Joiner() {
        @Override
        public void printSeparator(PrettyPrinter out) {
          out.print(", ");
        }
      });
    }
    out.print(" knows ");
    out.print(getKnows());
    out.print(" {");
    out.println();
    out.indent(1);
    out.join(getBodyDecls(), new PrettyPrinter.Joiner() {
      @Override
      public void printSeparator(PrettyPrinter out) {
        out.println();
        out.println();
      }
    });
    if (!out.isNewLine()) {
      out.println();
    }
    out.print("}");
  }
  public void NegationType.prettyPrint(PrettyPrinter out) {
    out.print("\u00AC");
    out.print(getOperand());
  }
  public void NothingType.prettyPrint(PrettyPrinter out) {
    out.print("\u22A5");
  }
  public void OneType.prettyPrint(PrettyPrinter out) {
    out.print("\u23A8\u00AB");
    out.print(getIri());
    out.print("\u00BB\u23AC");
  }
  public void ParConceptualType.prettyPrint(PrettyPrinter out) {
    out.print("\uFF62");
    out.print(getInner());
    out.print("\uFF63");
  }
  public void ParRoleishType.prettyPrint(PrettyPrinter out) {
    out.print("\uFF62");
    out.print(getInner());
    out.print("\uFF63");
  }
  public void QuantifierType.prettyPrint(PrettyPrinter out) {
    out.print(printPrefix());
    out.print(getRole());
    out.print(" \u21D2 ");
    out.print(getConcept());
  }
  public void RoleType.prettyPrint(PrettyPrinter out) {
    out.print("\u00AB");
    out.print(getIri());
    out.print("\u00BB");
  }
  public void SemanticTypeAccess.prettyPrint(PrettyPrinter out) {
    out.print("\uFF62");
    out.print(getConcept());
    out.print("\uFF63");
  }
}
