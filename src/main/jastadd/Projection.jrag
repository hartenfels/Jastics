/**
 * Frontend extension for projections.
 *
 * This works much like the <code>Query</code> aspect found in
 * <code>Query.jrag</code> aspect does, except for projections rather than
 * queries.
 */
aspect Projection {
  /**
   * Figures out the concept of a projection operator's left-hand side.
   *
   * If it's not actually a semantically-typed Individual, this returns
   * <code>UnknownConcept</code>. The compiler will probably bail out with an
   * error later in that case.
   */
  syn Conceptual DlProjectionExpr.getExprConcept() {
    TypeDecl et = getExpr().type();
    return et.isSemanticTypeDecl()
         ? ((SemanticTypeDecl) et).getConcept()
         : new UnknownConcept();
  }

  /**
   * Figures out a projection operator's return type.
   *
   * This is of the form <code>∃R⁻·C</code>, where <code>R</code> is the type
   * of the right-hand side and <code>C</code> is the type of the left-hand
   * side of the projection.
   */
  protected Conceptual DlProjectionExpr.getResultingConcept() {
    Roleish    r = getRoleExpr().toRoleish();
    Conceptual c = getExprConcept();
    return new Existence(new Inversion(r), c).stripUnknown();
  }

  /**
   * Figures out a projection operator's required left-hand side type.
   *
   * This is of the form <code>∃R·⊤</code>, where <code>R</code> is the type of
   * the right-hand side of the projection. The left-hand side of the
   * projection must be a subtype of this.
   */
  protected Conceptual DlProjectionExpr.getProjectionSubtype() {
    Roleish r = getRoleExpr().toRoleish();
    return new Existence(r, new Everything()).stripUnknown();
  }


  /**
   * Figures out the resulting type of a projection operation.
   *
   * That type will be a <code>java.util.Set</code> of the type that
   * <code>getResultingConcept</code> returns.
   */
  eq DlProjectionExpr.type() {
    Collection<TypeDecl> param = new LinkedList<>();
    String               path  = lookupDataSource();

    if (path != null) {
      ClassDecl ind = (ClassDecl) lookupType("semantics.model", "Individual");
      param.add(ind.semanticTypeDecl(path, getResultingConcept()));
    }
    else {
      param.add(unknownType());
    }

    GenericInterfaceDecl set = (GenericInterfaceDecl) lookupType("java.util", "Set");
    return set.lookupParTypeDecl(param);
  }


  /** Checks that the left-hand side can safely be projected on. */
  syn lazy boolean DlProjectionExpr.isProjectable() {
    String     path = lookupDataSource();
    Conceptual c    = getExprConcept();

    if (path == null || c == null || c.isUnknown()) {
      return false;
    }

    return KnowBase.of(path).isSubtype(c, getProjectionSubtype());
  }

  protected Problem DlProjectionExpr.errorNotProjectable(Expr e) {
    return errorf("'%s' is not a subtype of '%s'",
                  getExprConcept(), getProjectionSubtype());
  }

  // Type-checking for projections. The left-hand side must be an instance of
  // ∃R·⊤ and the right-hand side must be a role type or a String.

  DlProjectionExpr contributes errorNotProjectable(getExpr())
    when !isProjectable()
    to CompilationUnit.problems();

  DlProjectionExpr contributes errorNotRoleable(getRoleExpr())
    when !isRoleable(getRoleExpr())
    to CompilationUnit.problems();


  // Satisfiability check for projections. Checks if ∃R⁻·C is unsatisfiable.
  // This is unlikely to be actually known, but for consistency with queries it
  // is done anyway.

  syn lazy boolean DlProjectionExpr.isGuaranteedUnsatisfiable() {
    String     path = lookupDataSource();
    Conceptual c    = getExprConcept();

    if (path == null || c == null || c.isUnknown()) {
      return false;
    }

    return !KnowBase.of(path).isSatisfiable(getResultingConcept());
  }

  DlProjectionExpr contributes
      errorf("projection of '%s' on '%s' is unsatisfiable",
             getRoleExpr().toRoleish(), getExprConcept())
    when isGuaranteedUnsatisfiable()
    to CompilationUnit.problems();


  // Signature warnings for projections, like is done for queries.

  DlProjectionExpr contributes signatureWarning(getRoleExpr().toRoleish())
    when !hasSignature(getRoleExpr().toRoleish(), "role")
    to CompilationUnit.problems();
}


/**
 * Backend extension for projections.
 *
 * This is very much an extension of the <code>QueryBackend</code> aspect found
 * in <code>Query.jrag</code>. It simply handles bytecode generation of the
 * projection operator, which is done by transforming it into regular Java code
 * and then building the bytecode from that.
 */
aspect ProjectionBackend {
  syn nta Expr DlProjectionExpr.getTransformed() =
    getKnowBase().mkMethodAccess(
        "project", getExpr().treeCopyNoTransform(), mkModel("Role", getRoleExpr()));

  public void DlProjectionExpr.createBCode(CodeGeneration gen) {
    getTransformed().createBCode(gen);
  }
}
