aspect Projection {
  eq DlProjectionExpr.type() {
    TypeDecl   et = getExpr().type();
    Roleish    r  = getRole().toModel();
    Conceptual c;

    if (et.isSemanticTypeDecl()) {
      c = ((SemanticTypeDecl) et).getConcept();
    }
    else {
      c = new Everything();
    }

    Collection<TypeDecl> param = new LinkedList<>();
    String               path  = lookupKnows();

    if (path != null) {
      ClassDecl ind = (ClassDecl) lookupType("semantics.model", "Individual");
      param.add(ind.semanticTypeDecl(path, new Existence(new Inversion(r), c)));
    }
    else {
      param.add(unknownType());
    }

    GenericInterfaceDecl set = (GenericInterfaceDecl) lookupType("java.util", "Set");
    return set.lookupParTypeDecl(param);
  }


  protected boolean DlProjectionExpr.isIndividual(Expr e) {
    return e.type().instanceOf(lookupType("semantics.model", "Individual"));
  }

  protected Problem DlProjectionExpr.errorNotIndividual(Expr e) {
    return errorf("'%s' is not an individual", e.type().typeName());
  }

  DlProjectionExpr contributes errorNotIndividual(getExpr())
    when !isIndividual(getExpr())
    to CompilationUnit.problems();
}


aspect ProjectionBackend {
  syn nta Expr DlProjectionExpr.getTransformed() =
    getKnowBase().mkMethodAccess(
        "project", getExpr().treeCopyNoTransform(), getRole().toExpr());

  public void DlProjectionExpr.createBCode(CodeGeneration gen) {
    getTransformed().createBCode(gen);
  }
}
