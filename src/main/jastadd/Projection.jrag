aspect Projection {
  syn Conceptual DlProjectionExpr.getExprConcept() {
    TypeDecl et = getExpr().type();
    return et.isSemanticTypeDecl()
         ? ((SemanticTypeDecl) et).getConcept()
         : new UnknownConcept();
  }

  protected Conceptual DlProjectionExpr.getResultingConcept() {
    Roleish    r = getRoleExpr().toRoleish();
    Conceptual c = getExprConcept();
    return new Existence(new Inversion(r), c).stripUnknown();
  }

  protected Conceptual DlProjectionExpr.getProjectionSubtype() {
    Roleish r = getRoleExpr().toRoleish();
    return new Existence(r, new Everything()).stripUnknown();
  }


  eq DlProjectionExpr.type() {
    Collection<TypeDecl> param = new LinkedList<>();
    String               path  = lookupDataSource();

    if (path != null) {
      ClassDecl  ind = (ClassDecl) lookupType("semantics.model", "Individual");
      param.add(ind.semanticTypeDecl(path, getResultingConcept()));
    }
    else {
      param.add(unknownType());
    }

    GenericInterfaceDecl set = (GenericInterfaceDecl) lookupType("java.util", "Set");
    return set.lookupParTypeDecl(param);
  }


  syn lazy boolean DlProjectionExpr.isProjectable() {
    String     path = lookupDataSource();
    Conceptual c    = getExprConcept();

    if (path == null || c == null || c.isUnknown()) {
      return false;
    }

    return KnowBase.of(path).isSubtype(c, getProjectionSubtype());
  }

  protected Problem DlProjectionExpr.errorNotProjectable(Expr e) {
    return errorf("'%s' is not a subtype of '%s'",
                  getExprConcept(), getProjectionSubtype());
  }

  DlProjectionExpr contributes errorNotProjectable(getExpr())
    when !isProjectable()
    to CompilationUnit.problems();

  DlProjectionExpr contributes errorNotRoleable(getRoleExpr())
    when !isRoleable(getRoleExpr())
    to CompilationUnit.problems();


  syn lazy boolean DlProjectionExpr.isGuaranteedUnsatisfiable() {
    String     path = lookupDataSource();
    Conceptual c    = getExprConcept();

    if (path == null || c == null || c.isUnknown()) {
      return false;
    }

    return !KnowBase.of(path).isSatisfiable(getResultingConcept());
  }

  DlProjectionExpr contributes
      errorf("projection of '%s' on '%s' is unsatisfiable",
             getRoleExpr().toRoleish(), getExprConcept())
    when isGuaranteedUnsatisfiable()
    to CompilationUnit.problems();


  DlProjectionExpr contributes signatureWarning(getRoleExpr().toRoleish())
    when !hasSignature(getRoleExpr().toRoleish(), "role")
    to CompilationUnit.problems();
}


aspect ProjectionBackend {
  syn nta Expr DlProjectionExpr.getTransformed() =
    getKnowBase().mkMethodAccess(
        "project", getExpr().treeCopyNoTransform(), mkModel("Role", getRoleExpr()));

  public void DlProjectionExpr.createBCode(CodeGeneration gen) {
    getTransformed().createBCode(gen);
  }
}
