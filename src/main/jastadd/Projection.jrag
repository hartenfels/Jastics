aspect Projection {
  eq DlProjectionExpr.type() {
    Collection<TypeDecl> param = new LinkedList<>();
    param.add(lookupType("semantics.model", "Individual"));

    GenericInterfaceDecl set = (GenericInterfaceDecl) lookupType("java.util", "Set");
    return set.lookupParTypeDecl(param);
  }


  protected boolean DlProjectionExpr.isIndividual(Expr e) {
    return e.type().instanceOf(lookupType("semantics.model", "Individual"));
  }

  protected Problem DlProjectionExpr.errorNotIndividual(Expr e) {
    return errorf("'%s' is not an individual", e.type().typeName());
  }

  DlProjectionExpr contributes errorNotIndividual(getExpr())
    when !isIndividual(getExpr())
    to CompilationUnit.problems();
}


aspect ProjectionBackend {
  syn nta Expr DlProjectionExpr.getTransformed() =
    new Dot(
      getExpr().treeCopyNoTransform(),
      new MethodAccess("project", new List<Expr>(getRole().toExpr()))
    );


  public void DlProjectionExpr.createBCode(CodeGeneration gen) {
    getTransformed().createBCode(gen);
  }
}
