aspect Transform {
  protected abstract TypeDecl DlBinaryExpr.getSemanticTypeDecl();

  protected TypeDecl DlUnionExpr.getSemanticTypeDecl() {
    return lookupType("semantics.model", "Union");
  }

  protected TypeDecl DlIntersectionExpr.getSemanticTypeDecl() {
    return lookupType("semantics.model", "Intersection");
  }


  protected ClassInstanceExpr DlBinaryExpr.wrapStringInConcept(Expr e) {
    return new ClassInstanceExpr(
      lookupType("semantics.model", "Concept").createQualifiedAccess(),
      new List<Expr>(e.treeCopyNoTransform())
    );
  }

  syn nta Expr DlBinaryExpr.getTransformed() {
    List<Expr> args = new List<Expr>();

    for (Expr e : new Expr[]{getLeftOperand(), getRightOperand()}) {
      if (e.type().isString()) {
        args.add(wrapStringInConcept(e));
      }
      else {
        args.add(e.treeCopyNoTransform());
      }
    }

    Expr wrap = new ClassInstanceExpr(getSemanticTypeDecl().createQualifiedAccess(), args);
    wrap.setParent(getParent());
    args.setParent(wrap);

    return wrap;
  }


  public void DlBinaryExpr.createBCode(CodeGeneration gen) {
    getTransformed().createBCode(gen);
  }
}
