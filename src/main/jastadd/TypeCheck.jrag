aspect TypeCheck {
  protected boolean Expr.isConceptOrString(Expr e) {
    TypeDecl conceptual = lookupType("semantics.model", "Conceptual");
    TypeDecl td         = e.type();
    return td.isString() || td.instanceOf(conceptual);
  }

  protected Problem Expr.errorNotConceptOrString(Expr e) {
    return errorf("'%s' is neither concept nor string", e.type().typeName());
  }


  DlBinaryExpr contributes errorNotConceptOrString(getLeftOperand())
    when !isConceptOrString(getLeftOperand())
    to CompilationUnit.problems();

  DlBinaryExpr contributes errorNotConceptOrString(getRightOperand())
    when !isConceptOrString(getRightOperand())
    to CompilationUnit.problems();


  DlQueryExpr contributes error("class 'knows' no data source")
    when lookupKnows() == null
    to CompilationUnit.problems();

  DlQueryExpr contributes errorNotConceptOrString(getOperand())
    when !isConceptOrString(getOperand())
    to CompilationUnit.problems();
}
