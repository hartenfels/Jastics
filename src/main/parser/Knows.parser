ClassDecl class_declaration =
    modifiers.m? CLASS IDENTIFIER super.s? interfaces.i? knows.k class_body.b
      {: return new KnowsClassDecl(new Modifiers(m), IDENTIFIER, s, i, k, b); :}
  ;

// We want `class Thing knows "some.rdf"` to be valid syntax. However, turning
// `knows` into a keyword would break existing Java code that happens to use it
// as an identifier anywhere. So instead, we just parse it as an identifier and
// manually throw a syntax error if it's not the string "knows". Since Java
// doesn't allow an identifier just hanging around in that spot, this won't
// cause any breakage.

StringLiteral knows =
    IDENTIFIER STRING_LITERAL {:
        if (!IDENTIFIER.value.equals("knows")) {
          report.syntaxError(IDENTIFIER);
        }
        return new StringLiteral(STRING_LITERAL);
      :}
  ;
