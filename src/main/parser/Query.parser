/**
 * Transforms ⊓= and ⊔= operators into separate = and ⊓/⊔ expressions
 * immediately after parsing. This works around issues with bytecode generation
 * for new assignment operators in ExtendJ, which makes the JVM bail out with a
 * stack mismatch error.
 */
Expr assignment =
    postfix_expression.dest DL_INTERSECTIONEQ assignment_expression.source
        {: return new AssignSimpleExpr(dest, new DlIntersectionExpr(dest, source)); :}
  | postfix_expression.dest DL_UNIONEQ assignment_expression.source
        {: return new AssignSimpleExpr(dest, new DlUnionExpr(dest, source)); :}
  ;


Expr dl_union_expression =
    dl_union_expression.e1 DL_UNION dl_intersection_expression.e2
        {: return new DlUnionExpr(e1, e2); :}
  | dl_intersection_expression @BOTTOM
  ;

Expr dl_union_expression_nn =
    dl_union_expression_nn.e1 DL_UNION dl_intersection_expression_nn.e2
        {: return new DlUnionExpr(e1, e2); :}
  | dl_intersection_expression_nn
  ;


Expr dl_intersection_expression =
    dl_intersection_expression.e1 DL_INTERSECTION shift_expression.e2
        {: return new DlIntersectionExpr(e1, e2); :}
  | shift_expression @BOTTOM
  ;

Expr dl_intersection_expression_nn =
    dl_intersection_expression_nn.e1 DL_INTERSECTION shift_expression_nn.e2
        {: return new DlIntersectionExpr(e1, e2); :}
  | shift_expression_nn
  ;


Expr dl_postfix_expression =
    dl_inversion_expression
  | dl_quantifier_expression
  ;

Expr postfix_expression    = dl_postfix_expression;
Expr postfix_expression_nn = dl_postfix_expression;


Expr dl_unary_expression =
    dl_negation_expression
  | dl_one_expression
  ;

Expr unary_expression_not_plus_minus    = dl_unary_expression;
Expr unary_expression_not_plus_minus_nn = dl_unary_expression;


/**
 * Quantifiers use either a <code>·</code> or a <code>...</code> as a separator
 * between their role and concept parts. Since those are different tokens, the
 * parser needs to handle both of those cases here.
 */
Expr dl_quantifier_expression =
    DL_EXISTENCE expression.e1 DL_DOT expression.e2
        {: return new DlExistenceExpr(e1, e2); :}
  | DL_UNIVERSAL expression.e1 DL_DOT expression.e2
        {: return new DlUniversalExpr(e1, e2); :}
  | DL_EXISTENCE expression.e1 ELLIPSIS expression.e2
        {: return new DlExistenceExpr(e1, e2); :}
  | DL_UNIVERSAL expression.e1 ELLIPSIS expression.e2
        {: return new DlUniversalExpr(e1, e2); :}
  ;


Expr dl_negation_expression =
    DL_NEGATION expression.e {: return new DlNegationExpr(e); :}
  ;

Expr dl_inversion_expression =
    postfix_expression.e DL_INVERSION @POSTINCDEC {: return new DlInversionExpr(e); :}
  ;


Expr dl_one_expression =
    DL_LCURLY expression.e DL_RCURLY {: return new DlOneExpr(e); :}
  ;


Expr literal =
    DL_EVERYTHING @CAST {: return new DlEverythingExpr(DL_EVERYTHING); :}
  | DL_NOTHING    @CAST {: return new DlNothingExpr   (DL_NOTHING   ); :}
  | DL_FULL       @CAST {: return new DlFullExpr      (DL_FULL      ); :}
  | DL_EMPTY      @CAST {: return new DlEmptyExpr     (DL_EMPTY     ); :}
  ;


Expr primary_no_new_array =
    dl_query
  ;

Expr dl_query =
    DL_QUERY LPAREN expression.e RPAREN {: return new DlQueryExpr(e); :}
  ;
