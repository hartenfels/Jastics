ConceptualType concept_type = union_type;

ConceptualType union_type =
    union_type.e1 DL_UNION intersection_type.e2 {: return new UnionType(e1, e2); :}
  | intersection_type
  ;

ConceptualType intersection_type =
    intersection_type.e1 DL_INTERSECTION negation_type.e2 {: return new IntersectionType(e1, e2); :}
  | quantifier_type
  ;

ConceptualType quantifier_type =
    DL_EXISTENCE  role_type.r DL_DOT   concept_type.c {: return new ExistenceType(r, c); :}
  | DL_UNIVERSAL  role_type.r DL_DOT   concept_type.c {: return new UniversalType(r, c); :}
  | DL_EXISTENCE  role_type.r ELLIPSIS concept_type.c {: return new ExistenceType(r, c); :}
  | DL_UNIVERSAL  role_type.r ELLIPSIS concept_type.c {: return new UniversalType(r, c); :}
  | DLT_EXISTENCE role_type.r DL_DOT   concept_type.c {: return new ExistenceType(r, c); :}
  | DLT_UNIVERSAL role_type.r DL_DOT   concept_type.c {: return new UniversalType(r, c); :}
  | DLT_EXISTENCE role_type.r ELLIPSIS concept_type.c {: return new ExistenceType(r, c); :}
  | DLT_UNIVERSAL role_type.r ELLIPSIS concept_type.c {: return new UniversalType(r, c); :}
  | negation_type
  ;

ConceptualType negation_type =
    DL_NEGATION negation_type.n  {: return new NegationType(n); :}
  | primary_concept_type
  ;

ConceptualType primary_concept_type =
    DL_LITERAL.l                       {: return new ConceptType(l); :}
  | DL_EVERYTHING                      {: return new EverythingType(); :}
  | DL_NOTHING                         {: return new NothingType(); :}
  | DLT_EVERYTHING                     {: return new EverythingType(); :}
  | DLT_NOTHING                        {: return new NothingType(); :}
  | DL_LCURLY DL_LITERAL.l   DL_RCURLY {: return new OneType(l); :}
  | LBRACK    concept_type.c RBRACK    {: return new ParConceptualType(c); :}
  ;


RoleishType role_type = inversion_type;

RoleishType inversion_type =
    primary_role_type
  | inversion_type.i DL_INVERSION {: return new InversionType(i); :}
  ;

RoleishType primary_role_type =
    DL_LITERAL.l              {: return new RoleType(l); :}
  | DL_ANY                    {: return new AnyType(); :}
  | DL_NONE                   {: return new NoneType(); :}
  | LBRACK role_type.r RBRACK {: return new ParRoleishType(r); :}
  ;


Access reference_type =
    semantic_type
  ;

Access semantic_type =
    concept_type.c {: return new SemanticTypeAccess("semantics.model", "Individual", c); :}
  ;


Expr cast_expression =
    LPAREN semantic_type.t RPAREN unary_expression_not_plus_minus.e @CAST
        {: return new SemanticCastExpr(t, e); :}
  ;
